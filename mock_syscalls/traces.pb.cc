// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traces.proto

#include "traces.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace generated {
namespace traces {
PROTOBUF_CONSTEXPR Terminated::Terminated(::_pbi::ConstantInitialized) {}
struct TerminatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminatedDefaultTypeInternal() {}
  union {
    Terminated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminatedDefaultTypeInternal
        _Terminated_default_instance_;
PROTOBUF_CONSTEXPR IoData::IoData(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.available_data_)*/ {
                 &::_pbi::fixed_address_empty_string,
                 ::_pbi::ConstantInitialized{}},
             /*decltype(_impl_.additional_length_)*/ uint64_t{0u},
             /*decltype(_impl_._cached_size_)*/ {}} {}
struct IoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IoDataDefaultTypeInternal() {}
  union {
    IoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IoDataDefaultTypeInternal
        _IoData_default_instance_;
PROTOBUF_CONSTEXPR Fds::Fds(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.fds_)*/ {},
             /*decltype(_impl_._fds_cached_byte_size_)*/ {0},
             /*decltype(_impl_._cached_size_)*/ {}} {}
struct FdsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FdsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FdsDefaultTypeInternal() {}
  union {
    Fds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FdsDefaultTypeInternal
        _Fds_default_instance_;
PROTOBUF_CONSTEXPR Syscall::Syscall(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.value_)*/ {},
             /*decltype(_impl_._cached_size_)*/ {},
             /*decltype(_impl_._oneof_case_)*/ {}} {}
struct SyscallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyscallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyscallDefaultTypeInternal() {}
  union {
    Syscall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyscallDefaultTypeInternal
        _Syscall_default_instance_;
PROTOBUF_CONSTEXPR Syscalls::Syscalls(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.syscalls_)*/ {}, /*decltype(_impl_.args_)*/ {},
             /*decltype(_impl_._cached_size_)*/ {}} {}
struct SyscallsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyscallsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyscallsDefaultTypeInternal() {}
  union {
    Syscalls _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyscallsDefaultTypeInternal
        _Syscalls_default_instance_;
PROTOBUF_CONSTEXPR Parts_ReadDataEntry_DoNotUse::Parts_ReadDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Parts_ReadDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Parts_ReadDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Parts_ReadDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Parts_ReadDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
        Parts_ReadDataEntry_DoNotUseDefaultTypeInternal
            _Parts_ReadDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Parts::Parts(::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_.input_cells_)*/ {},
          /*decltype(_impl_.input_cell_data_)*/ {},
          /*decltype(_impl_.witnesses_)*/ {},
          /*decltype(_impl_.inherited_fds_)*/ {},
          /*decltype(_impl_._inherited_fds_cached_byte_size_)*/ {0},
          /*decltype(_impl_.read_data_)*/ {::_pbi::ConstantInitialized()},
          /*decltype(_impl_.tx_hash_)*/
          {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}},
          /*decltype(_impl_.other_syscalls_)*/ nullptr,
          /*decltype(_impl_._cached_size_)*/ {}} {}
struct PartsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartsDefaultTypeInternal() {}
  union {
    Parts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartsDefaultTypeInternal
        _Parts_default_instance_;
PROTOBUF_CONSTEXPR Root::Root(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.value_)*/ {},
             /*decltype(_impl_._cached_size_)*/ {},
             /*decltype(_impl_._oneof_case_)*/ {}} {}
struct RootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RootDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RootDefaultTypeInternal() {}
  union {
    Root _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RootDefaultTypeInternal
        _Root_default_instance_;
}  // namespace traces
}  // namespace generated
static ::_pb::Metadata file_level_metadata_traces_2eproto[8];
static constexpr ::_pb::EnumDescriptor const**
    file_level_enum_descriptors_traces_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const**
    file_level_service_descriptors_traces_2eproto = nullptr;

const uint32_t TableStruct_traces_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Terminated, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::generated::traces::IoData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::generated::traces::IoData, _impl_.available_data_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::IoData,
                          _impl_.additional_length_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Fds, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Fds, _impl_.fds_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Syscall, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Syscall, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::generated::traces::Syscall, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Syscalls, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Syscalls, _impl_.syscalls_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Syscalls, _impl_.args_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts_ReadDataEntry_DoNotUse,
                          _has_bits_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts_ReadDataEntry_DoNotUse,
                          _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts_ReadDataEntry_DoNotUse,
                          key_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts_ReadDataEntry_DoNotUse,
                          value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts, _impl_.tx_hash_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts, _impl_.input_cells_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts, _impl_.input_cell_data_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts, _impl_.witnesses_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts, _impl_.inherited_fds_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts, _impl_.read_data_),
    PROTOBUF_FIELD_OFFSET(::generated::traces::Parts, _impl_.other_syscalls_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Root, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::generated::traces::Root, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::generated::traces::Root, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    {0, -1, -1, sizeof(::generated::traces::Terminated)},
    {6, -1, -1, sizeof(::generated::traces::IoData)},
    {14, -1, -1, sizeof(::generated::traces::Fds)},
    {21, -1, -1, sizeof(::generated::traces::Syscall)},
    {33, -1, -1, sizeof(::generated::traces::Syscalls)},
    {41, 49, -1, sizeof(::generated::traces::Parts_ReadDataEntry_DoNotUse)},
    {51, -1, -1, sizeof(::generated::traces::Parts)},
    {64, -1, -1, sizeof(::generated::traces::Root)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::generated::traces::_Terminated_default_instance_._instance,
    &::generated::traces::_IoData_default_instance_._instance,
    &::generated::traces::_Fds_default_instance_._instance,
    &::generated::traces::_Syscall_default_instance_._instance,
    &::generated::traces::_Syscalls_default_instance_._instance,
    &::generated::traces::_Parts_ReadDataEntry_DoNotUse_default_instance_
         ._instance,
    &::generated::traces::_Parts_default_instance_._instance,
    &::generated::traces::_Root_default_instance_._instance,
};

const char descriptor_table_protodef_traces_2eproto[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) =
    "\n\014traces.proto\022\020generated.traces\"\014\n\nTerm"
    "inated\";\n\006IoData\022\026\n\016available_data\030\001 \001(\014"
    "\022\031\n\021additional_length\030\002 "
    "\001(\004\"\022\n\003Fds\022\013\n\003fd"
    "s\030\001 "
    "\003(\004\"\324\001\n\007Syscall\022\032\n\020return_with_code\030"
    "\001 \001(\003H\000\022\035\n\023success_output_data\030\002 "
    "\001(\004H\000\022+"
    "\n\007io_data\030\003 \001(\0132\030.generated.traces.IoDat"
    "aH\000\0222\n\nterminated\030\004 \001(\0132\034.generated.trac"
    "es.TerminatedH\000\022$\n\003fds\030\005 \001(\0132\025.generated"
    ".traces.FdsH\000B\007\n\005value\"E\n\010Syscalls\022+\n\010sy"
    "scalls\030\001 \003(\0132\031.generated.traces.Syscall\022"
    "\014\n\004args\030\002 "
    "\003(\014\"\217\002\n\005Parts\022\017\n\007tx_hash\030\001 \001(\014"
    "\022\023\n\013input_cells\030\002 \003(\014\022\027\n\017input_cell_data"
    "\030\003 \003(\014\022\021\n\twitnesses\030\004 "
    "\003(\014\022\025\n\rinherited_f"
    "ds\030\005 \003(\004\0228\n\tread_data\030\006 \003(\0132%.generated."
    "traces.Parts.ReadDataEntry\0222\n\016other_sysc"
    "alls\030\007 \001(\0132\032.generated.traces.Syscalls\032/"
    "\n\rReadDataEntry\022\013\n\003key\030\001 "
    "\001(\004\022\r\n\005value\030\002 "
    "\001(\014:\0028\001\"i\n\004Root\022(\n\005parts\030\001 "
    "\001(\0132\027.generat"
    "ed.traces.PartsH\000\022.\n\010syscalls\030\003 \001(\0132\032.ge"
    "nerated.traces.SyscallsH\000B\007\n\005valueb\006prot"
    "o3";
static ::_pbi::once_flag descriptor_table_traces_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_traces_2eproto = {
    false,
    false,
    802,
    descriptor_table_protodef_traces_2eproto,
    "traces.proto",
    &descriptor_table_traces_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_traces_2eproto::offsets,
    file_level_metadata_traces_2eproto,
    file_level_enum_descriptors_traces_2eproto,
    file_level_service_descriptors_traces_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable*
descriptor_table_traces_2eproto_getter() {
  return &descriptor_table_traces_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner
    dynamic_init_dummy_traces_2eproto(&descriptor_table_traces_2eproto);
namespace generated {
namespace traces {

// ===================================================================

class Terminated::_Internal {
 public:
};

Terminated::Terminated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena,
                                                        is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:generated.traces.Terminated)
}
Terminated::Terminated(const Terminated& from)
    : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Terminated* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:generated.traces.Terminated)
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Terminated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Terminated::GetClassData()
    const {
  return &_class_data_;
}

::PROTOBUF_NAMESPACE_ID::Metadata Terminated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_traces_2eproto_getter,
                                   &descriptor_table_traces_2eproto_once,
                                   file_level_metadata_traces_2eproto[0]);
}

// ===================================================================

class IoData::_Internal {
 public:
};

IoData::IoData(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.traces.IoData)
}
IoData::IoData(const IoData& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  IoData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{decltype(_impl_.available_data_){},
                      decltype(_impl_.additional_length_){},
                      /*decltype(_impl_._cached_size_)*/ {}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.available_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.available_data_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_available_data().empty()) {
    _this->_impl_.available_data_.Set(from._internal_available_data(),
                                      _this->GetArenaForAllocation());
  }
  _this->_impl_.additional_length_ = from._impl_.additional_length_;
  // @@protoc_insertion_point(copy_constructor:generated.traces.IoData)
}

inline void IoData::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{decltype(_impl_.available_data_){},
                      decltype(_impl_.additional_length_){uint64_t{0u}},
                      /*decltype(_impl_._cached_size_)*/ {}};
  _impl_.available_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.available_data_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IoData::~IoData() {
  // @@protoc_insertion_point(destructor:generated.traces.IoData)
  if (auto* arena =
          _internal_metadata_
              .DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
    (void)arena;
    return;
  }
  SharedDtor();
}

inline void IoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.available_data_.Destroy();
}

void IoData::SetCachedSize(int size) const { _impl_._cached_size_.Set(size); }

void IoData::Clear() {
  // @@protoc_insertion_point(message_clear_start:generated.traces.IoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.available_data_.ClearToEmpty();
  _impl_.additional_length_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes available_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_available_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 additional_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.additional_length_ =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IoData::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.traces.IoData)
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes available_data = 1;
  if (!this->_internal_available_data().empty()) {
    target = stream->WriteBytesMaybeAliased(1, this->_internal_available_data(),
                                            target);
  }

  // uint64 additional_length = 2;
  if (this->_internal_additional_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_additional_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_
            .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.traces.IoData)
  return target;
}

size_t IoData::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:generated.traces.IoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // bytes available_data = 1;
  if (!this->_internal_available_data().empty()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                this->_internal_available_data());
  }

  // uint64 additional_length = 2;
  if (this->_internal_additional_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_additional_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, IoData::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* IoData::GetClassData()
    const {
  return &_class_data_;
}

void IoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                       const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IoData*>(&to_msg);
  auto& from = static_cast<const IoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.traces.IoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  if (!from._internal_available_data().empty()) {
    _this->_internal_set_available_data(from._internal_available_data());
  }
  if (from._internal_additional_length() != 0) {
    _this->_internal_set_additional_length(from._internal_additional_length());
  }
  _this->_internal_metadata_
      .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
          from._internal_metadata_);
}

void IoData::CopyFrom(const IoData& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:generated.traces.IoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoData::IsInitialized() const { return true; }

void IoData::InternalSwap(IoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.available_data_, lhs_arena, &other->_impl_.available_data_,
      rhs_arena);
  swap(_impl_.additional_length_, other->_impl_.additional_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_traces_2eproto_getter,
                                   &descriptor_table_traces_2eproto_once,
                                   file_level_metadata_traces_2eproto[1]);
}

// ===================================================================

class Fds::_Internal {
 public:
};

Fds::Fds(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.traces.Fds)
}
Fds::Fds(const Fds& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  Fds* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{decltype(_impl_.fds_){from._impl_.fds_},
                      /*decltype(_impl_._fds_cached_byte_size_)*/ {0},
                      /*decltype(_impl_._cached_size_)*/ {}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:generated.traces.Fds)
}

inline void Fds::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{decltype(_impl_.fds_){arena},
                      /*decltype(_impl_._fds_cached_byte_size_)*/ {0},
                      /*decltype(_impl_._cached_size_)*/ {}};
}

Fds::~Fds() {
  // @@protoc_insertion_point(destructor:generated.traces.Fds)
  if (auto* arena =
          _internal_metadata_
              .DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
    (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fds_.~RepeatedField();
}

void Fds::SetCachedSize(int size) const { _impl_._cached_size_.Set(size); }

void Fds::Clear() {
  // @@protoc_insertion_point(message_clear_start:generated.traces.Fds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.fds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 fds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(
              _internal_mutable_fds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_fds(
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fds::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.traces.Fds)
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated uint64 fds = 1;
  {
    int byte_size =
        _impl_._fds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(1, _internal_fds(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_
            .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.traces.Fds)
  return target;
}

size_t Fds::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:generated.traces.Fds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated uint64 fds = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::UInt64Size(this->_impl_.fds_);
    if (data_size > 0) {
      total_size += 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._fds_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, Fds::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Fds::GetClassData() const {
  return &_class_data_;
}

void Fds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                    const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Fds*>(&to_msg);
  auto& from = static_cast<const Fds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.traces.Fds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_impl_.fds_.MergeFrom(from._impl_.fds_);
  _this->_internal_metadata_
      .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
          from._internal_metadata_);
}

void Fds::CopyFrom(const Fds& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:generated.traces.Fds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fds::IsInitialized() const { return true; }

void Fds::InternalSwap(Fds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fds_.InternalSwap(&other->_impl_.fds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_traces_2eproto_getter,
                                   &descriptor_table_traces_2eproto_once,
                                   file_level_metadata_traces_2eproto[2]);
}

// ===================================================================

class Syscall::_Internal {
 public:
  static const ::generated::traces::IoData& io_data(const Syscall* msg);
  static const ::generated::traces::Terminated& terminated(const Syscall* msg);
  static const ::generated::traces::Fds& fds(const Syscall* msg);
};

const ::generated::traces::IoData& Syscall::_Internal::io_data(
    const Syscall* msg) {
  return *msg->_impl_.value_.io_data_;
}
const ::generated::traces::Terminated& Syscall::_Internal::terminated(
    const Syscall* msg) {
  return *msg->_impl_.value_.terminated_;
}
const ::generated::traces::Fds& Syscall::_Internal::fds(const Syscall* msg) {
  return *msg->_impl_.value_.fds_;
}
void Syscall::set_allocated_io_data(::generated::traces::IoData* io_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (io_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(io_data);
    if (message_arena != submessage_arena) {
      io_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, io_data, submessage_arena);
    }
    set_has_io_data();
    _impl_.value_.io_data_ = io_data;
  }
  // @@protoc_insertion_point(field_set_allocated:generated.traces.Syscall.io_data)
}
void Syscall::set_allocated_terminated(
    ::generated::traces::Terminated* terminated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (terminated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(terminated);
    if (message_arena != submessage_arena) {
      terminated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, terminated, submessage_arena);
    }
    set_has_terminated();
    _impl_.value_.terminated_ = terminated;
  }
  // @@protoc_insertion_point(field_set_allocated:generated.traces.Syscall.terminated)
}
void Syscall::set_allocated_fds(::generated::traces::Fds* fds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (fds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fds);
    if (message_arena != submessage_arena) {
      fds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fds, submessage_arena);
    }
    set_has_fds();
    _impl_.value_.fds_ = fds;
  }
  // @@protoc_insertion_point(field_set_allocated:generated.traces.Syscall.fds)
}
Syscall::Syscall(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.traces.Syscall)
}
Syscall::Syscall(const Syscall& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  Syscall* const _this = this;
  (void)_this;
  new (&_impl_)
      Impl_{decltype(_impl_.value_){}, /*decltype(_impl_._cached_size_)*/ {},
            /*decltype(_impl_._oneof_case_)*/ {}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kReturnWithCode: {
      _this->_internal_set_return_with_code(from._internal_return_with_code());
      break;
    }
    case kSuccessOutputData: {
      _this->_internal_set_success_output_data(
          from._internal_success_output_data());
      break;
    }
    case kIoData: {
      _this->_internal_mutable_io_data()
          ->::generated::traces::IoData::MergeFrom(from._internal_io_data());
      break;
    }
    case kTerminated: {
      _this->_internal_mutable_terminated()
          ->::generated::traces::Terminated::MergeFrom(
              from._internal_terminated());
      break;
    }
    case kFds: {
      _this->_internal_mutable_fds()->::generated::traces::Fds::MergeFrom(
          from._internal_fds());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:generated.traces.Syscall)
}

inline void Syscall::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_)
      Impl_{decltype(_impl_.value_){}, /*decltype(_impl_._cached_size_)*/ {},
            /*decltype(_impl_._oneof_case_)*/ {}};
  clear_has_value();
}

Syscall::~Syscall() {
  // @@protoc_insertion_point(destructor:generated.traces.Syscall)
  if (auto* arena =
          _internal_metadata_
              .DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
    (void)arena;
    return;
  }
  SharedDtor();
}

inline void Syscall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Syscall::SetCachedSize(int size) const { _impl_._cached_size_.Set(size); }

void Syscall::clear_value() {
  // @@protoc_insertion_point(one_of_clear_start:generated.traces.Syscall)
  switch (value_case()) {
    case kReturnWithCode: {
      // No need to clear
      break;
    }
    case kSuccessOutputData: {
      // No need to clear
      break;
    }
    case kIoData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.io_data_;
      }
      break;
    }
    case kTerminated: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.terminated_;
      }
      break;
    }
    case kFds: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.fds_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}

void Syscall::Clear() {
  // @@protoc_insertion_point(message_clear_start:generated.traces.Syscall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Syscall::_InternalParse(const char* ptr,
                                    ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 return_with_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_return_with_code(
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 success_output_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_success_output_data(
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.traces.IoData io_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_io_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.traces.Terminated terminated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_terminated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.traces.Fds fds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Syscall::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.traces.Syscall)
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 return_with_code = 1;
  if (_internal_has_return_with_code()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_return_with_code(), target);
  }

  // uint64 success_output_data = 2;
  if (_internal_has_success_output_data()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_success_output_data(), target);
  }

  // .generated.traces.IoData io_data = 3;
  if (_internal_has_io_data()) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, _Internal::io_data(this),
            _Internal::io_data(this).GetCachedSize(), target, stream);
  }

  // .generated.traces.Terminated terminated = 4;
  if (_internal_has_terminated()) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            4, _Internal::terminated(this),
            _Internal::terminated(this).GetCachedSize(), target, stream);
  }

  // .generated.traces.Fds fds = 5;
  if (_internal_has_fds()) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            5, _Internal::fds(this), _Internal::fds(this).GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_
            .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.traces.Syscall)
  return target;
}

size_t Syscall::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:generated.traces.Syscall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (value_case()) {
    // int64 return_with_code = 1;
    case kReturnWithCode: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_return_with_code());
      break;
    }
    // uint64 success_output_data = 2;
    case kSuccessOutputData: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_success_output_data());
      break;
    }
    // .generated.traces.IoData io_data = 3;
    case kIoData: {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *_impl_.value_.io_data_);
      break;
    }
    // .generated.traces.Terminated terminated = 4;
    case kTerminated: {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *_impl_.value_.terminated_);
      break;
    }
    // .generated.traces.Fds fds = 5;
    case kFds: {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *_impl_.value_.fds_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Syscall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, Syscall::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Syscall::GetClassData()
    const {
  return &_class_data_;
}

void Syscall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                        const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Syscall*>(&to_msg);
  auto& from = static_cast<const Syscall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.traces.Syscall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (from.value_case()) {
    case kReturnWithCode: {
      _this->_internal_set_return_with_code(from._internal_return_with_code());
      break;
    }
    case kSuccessOutputData: {
      _this->_internal_set_success_output_data(
          from._internal_success_output_data());
      break;
    }
    case kIoData: {
      _this->_internal_mutable_io_data()
          ->::generated::traces::IoData::MergeFrom(from._internal_io_data());
      break;
    }
    case kTerminated: {
      _this->_internal_mutable_terminated()
          ->::generated::traces::Terminated::MergeFrom(
              from._internal_terminated());
      break;
    }
    case kFds: {
      _this->_internal_mutable_fds()->::generated::traces::Fds::MergeFrom(
          from._internal_fds());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_
      .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
          from._internal_metadata_);
}

void Syscall::CopyFrom(const Syscall& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:generated.traces.Syscall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Syscall::IsInitialized() const { return true; }

void Syscall::InternalSwap(Syscall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Syscall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_traces_2eproto_getter,
                                   &descriptor_table_traces_2eproto_once,
                                   file_level_metadata_traces_2eproto[3]);
}

// ===================================================================

class Syscalls::_Internal {
 public:
};

Syscalls::Syscalls(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.traces.Syscalls)
}
Syscalls::Syscalls(const Syscalls& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  Syscalls* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{decltype(_impl_.syscalls_){from._impl_.syscalls_},
                      decltype(_impl_.args_){from._impl_.args_},
                      /*decltype(_impl_._cached_size_)*/ {}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:generated.traces.Syscalls)
}

inline void Syscalls::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_)
      Impl_{decltype(_impl_.syscalls_){arena}, decltype(_impl_.args_){arena},
            /*decltype(_impl_._cached_size_)*/ {}};
}

Syscalls::~Syscalls() {
  // @@protoc_insertion_point(destructor:generated.traces.Syscalls)
  if (auto* arena =
          _internal_metadata_
              .DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
    (void)arena;
    return;
  }
  SharedDtor();
}

inline void Syscalls::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.syscalls_.~RepeatedPtrField();
  _impl_.args_.~RepeatedPtrField();
}

void Syscalls::SetCachedSize(int size) const { _impl_._cached_size_.Set(size); }

void Syscalls::Clear() {
  // @@protoc_insertion_point(message_clear_start:generated.traces.Syscalls)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.syscalls_.Clear();
  _impl_.args_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Syscalls::_InternalParse(const char* ptr,
                                     ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .generated.traces.Syscall syscalls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_syscalls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Syscalls::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.traces.Syscalls)
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .generated.traces.Syscall syscalls = 1;
  for (unsigned i = 0,
                n = static_cast<unsigned>(this->_internal_syscalls_size());
       i < n; i++) {
    const auto& repfield = this->_internal_syscalls(i);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated bytes args = 2;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_
            .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.traces.Syscalls)
  return target;
}

size_t Syscalls::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:generated.traces.Syscalls)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .generated.traces.Syscall syscalls = 1;
  total_size += 1UL * this->_internal_syscalls_size();
  for (const auto& msg : this->_impl_.syscalls_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes args = 2;
  total_size +=
      1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.args_.size());
  for (int i = 0, n = _impl_.args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _impl_.args_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Syscalls::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, Syscalls::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Syscalls::GetClassData()
    const {
  return &_class_data_;
}

void Syscalls::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                         const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Syscalls*>(&to_msg);
  auto& from = static_cast<const Syscalls&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.traces.Syscalls)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_impl_.syscalls_.MergeFrom(from._impl_.syscalls_);
  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  _this->_internal_metadata_
      .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
          from._internal_metadata_);
}

void Syscalls::CopyFrom(const Syscalls& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:generated.traces.Syscalls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Syscalls::IsInitialized() const { return true; }

void Syscalls::InternalSwap(Syscalls* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.syscalls_.InternalSwap(&other->_impl_.syscalls_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Syscalls::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_traces_2eproto_getter,
                                   &descriptor_table_traces_2eproto_once,
                                   file_level_metadata_traces_2eproto[4]);
}

// ===================================================================

Parts_ReadDataEntry_DoNotUse::Parts_ReadDataEntry_DoNotUse() {}
Parts_ReadDataEntry_DoNotUse::Parts_ReadDataEntry_DoNotUse(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Parts_ReadDataEntry_DoNotUse::MergeFrom(
    const Parts_ReadDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Parts_ReadDataEntry_DoNotUse::GetMetadata()
    const {
  return ::_pbi::AssignDescriptors(&descriptor_table_traces_2eproto_getter,
                                   &descriptor_table_traces_2eproto_once,
                                   file_level_metadata_traces_2eproto[5]);
}

// ===================================================================

class Parts::_Internal {
 public:
  static const ::generated::traces::Syscalls& other_syscalls(const Parts* msg);
};

const ::generated::traces::Syscalls& Parts::_Internal::other_syscalls(
    const Parts* msg) {
  return *msg->_impl_.other_syscalls_;
}
Parts::Parts(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Parts::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:generated.traces.Parts)
}
Parts::Parts(const Parts& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  Parts* const _this = this;
  (void)_this;
  new (&_impl_)
      Impl_{decltype(_impl_.input_cells_){from._impl_.input_cells_},
            decltype(_impl_.input_cell_data_){from._impl_.input_cell_data_},
            decltype(_impl_.witnesses_){from._impl_.witnesses_},
            decltype(_impl_.inherited_fds_){from._impl_.inherited_fds_},
            /*decltype(_impl_._inherited_fds_cached_byte_size_)*/ {0},
            /*decltype(_impl_.read_data_)*/ {},
            decltype(_impl_.tx_hash_){},
            decltype(_impl_.other_syscalls_){nullptr},
            /*decltype(_impl_._cached_size_)*/ {}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.read_data_.MergeFrom(from._impl_.read_data_);
  _impl_.tx_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(),
                               _this->GetArenaForAllocation());
  }
  if (from._internal_has_other_syscalls()) {
    _this->_impl_.other_syscalls_ =
        new ::generated::traces::Syscalls(*from._impl_.other_syscalls_);
  }
  // @@protoc_insertion_point(copy_constructor:generated.traces.Parts)
}

inline void Parts::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_)
      Impl_{decltype(_impl_.input_cells_){arena},
            decltype(_impl_.input_cell_data_){arena},
            decltype(_impl_.witnesses_){arena},
            decltype(_impl_.inherited_fds_){arena},
            /*decltype(_impl_._inherited_fds_cached_byte_size_)*/ {0},
            /*decltype(_impl_.read_data_)*/ {::_pbi::ArenaInitialized(), arena},
            decltype(_impl_.tx_hash_){},
            decltype(_impl_.other_syscalls_){nullptr},
            /*decltype(_impl_._cached_size_)*/ {}};
  _impl_.tx_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Parts::~Parts() {
  // @@protoc_insertion_point(destructor:generated.traces.Parts)
  if (auto* arena =
          _internal_metadata_
              .DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
    (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Parts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_cells_.~RepeatedPtrField();
  _impl_.input_cell_data_.~RepeatedPtrField();
  _impl_.witnesses_.~RepeatedPtrField();
  _impl_.inherited_fds_.~RepeatedField();
  _impl_.read_data_.Destruct();
  _impl_.read_data_.~MapField();
  _impl_.tx_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.other_syscalls_;
}

void Parts::ArenaDtor(void* object) {
  Parts* _this = reinterpret_cast<Parts*>(object);
  _this->_impl_.read_data_.Destruct();
}
void Parts::SetCachedSize(int size) const { _impl_._cached_size_.Set(size); }

void Parts::Clear() {
  // @@protoc_insertion_point(message_clear_start:generated.traces.Parts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.input_cells_.Clear();
  _impl_.input_cell_data_.Clear();
  _impl_.witnesses_.Clear();
  _impl_.inherited_fds_.Clear();
  _impl_.read_data_.Clear();
  _impl_.tx_hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.other_syscalls_ != nullptr) {
    delete _impl_.other_syscalls_;
  }
  _impl_.other_syscalls_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes input_cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_cells();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes input_cell_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_cell_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes witnesses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_witnesses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 inherited_fds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(
              _internal_mutable_inherited_fds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_inherited_fds(
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, bytes> read_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.read_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .generated.traces.Syscalls other_syscalls = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_syscalls(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parts::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.traces.Parts)
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    target =
        stream->WriteBytesMaybeAliased(1, this->_internal_tx_hash(), target);
  }

  // repeated bytes input_cells = 2;
  for (int i = 0, n = this->_internal_input_cells_size(); i < n; i++) {
    const auto& s = this->_internal_input_cells(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes input_cell_data = 3;
  for (int i = 0, n = this->_internal_input_cell_data_size(); i < n; i++) {
    const auto& s = this->_internal_input_cell_data(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated bytes witnesses = 4;
  for (int i = 0, n = this->_internal_witnesses_size(); i < n; i++) {
    const auto& s = this->_internal_witnesses(i);
    target = stream->WriteBytes(4, s, target);
  }

  // repeated uint64 inherited_fds = 5;
  {
    int byte_size =
        _impl_._inherited_fds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(5, _internal_inherited_fds(),
                                         byte_size, target);
    }
  }

  // map<uint64, bytes> read_data = 6;
  if (!this->_internal_read_data().empty()) {
    using MapType = ::_pb::Map<uint64_t, std::string>;
    using WireHelper = Parts_ReadDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_read_data();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second,
                                               target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second,
                                               target, stream);
      }
    }
  }

  // .generated.traces.Syscalls other_syscalls = 7;
  if (this->_internal_has_other_syscalls()) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            7, _Internal::other_syscalls(this),
            _Internal::other_syscalls(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_
            .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.traces.Parts)
  return target;
}

size_t Parts::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:generated.traces.Parts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated bytes input_cells = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(
                        _impl_.input_cells_.size());
  for (int i = 0, n = _impl_.input_cells_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _impl_.input_cells_.Get(i));
  }

  // repeated bytes input_cell_data = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(
                        _impl_.input_cell_data_.size());
  for (int i = 0, n = _impl_.input_cell_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _impl_.input_cell_data_.Get(i));
  }

  // repeated bytes witnesses = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(
                        _impl_.witnesses_.size());
  for (int i = 0, n = _impl_.witnesses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _impl_.witnesses_.Get(i));
  }

  // repeated uint64 inherited_fds = 5;
  {
    size_t data_size =
        ::_pbi::WireFormatLite::UInt64Size(this->_impl_.inherited_fds_);
    if (data_size > 0) {
      total_size += 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._inherited_fds_cached_byte_size_.store(cached_size,
                                                  std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint64, bytes> read_data = 6;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(
                        this->_internal_read_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map<uint64_t, std::string>::const_iterator it =
           this->_internal_read_data().begin();
       it != this->_internal_read_data().end(); ++it) {
    total_size += Parts_ReadDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first,
                                                                    it->second);
  }

  // bytes tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                this->_internal_tx_hash());
  }

  // .generated.traces.Syscalls other_syscalls = 7;
  if (this->_internal_has_other_syscalls()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *_impl_.other_syscalls_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, Parts::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Parts::GetClassData() const {
  return &_class_data_;
}

void Parts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Parts*>(&to_msg);
  auto& from = static_cast<const Parts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.traces.Parts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_impl_.input_cells_.MergeFrom(from._impl_.input_cells_);
  _this->_impl_.input_cell_data_.MergeFrom(from._impl_.input_cell_data_);
  _this->_impl_.witnesses_.MergeFrom(from._impl_.witnesses_);
  _this->_impl_.inherited_fds_.MergeFrom(from._impl_.inherited_fds_);
  _this->_impl_.read_data_.MergeFrom(from._impl_.read_data_);
  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from._internal_has_other_syscalls()) {
    _this->_internal_mutable_other_syscalls()
        ->::generated::traces::Syscalls::MergeFrom(
            from._internal_other_syscalls());
  }
  _this->_internal_metadata_
      .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
          from._internal_metadata_);
}

void Parts::CopyFrom(const Parts& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:generated.traces.Parts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parts::IsInitialized() const { return true; }

void Parts::InternalSwap(Parts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_cells_.InternalSwap(&other->_impl_.input_cells_);
  _impl_.input_cell_data_.InternalSwap(&other->_impl_.input_cell_data_);
  _impl_.witnesses_.InternalSwap(&other->_impl_.witnesses_);
  _impl_.inherited_fds_.InternalSwap(&other->_impl_.inherited_fds_);
  _impl_.read_data_.InternalSwap(&other->_impl_.read_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_, lhs_arena, &other->_impl_.tx_hash_, rhs_arena);
  swap(_impl_.other_syscalls_, other->_impl_.other_syscalls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_traces_2eproto_getter,
                                   &descriptor_table_traces_2eproto_once,
                                   file_level_metadata_traces_2eproto[6]);
}

// ===================================================================

class Root::_Internal {
 public:
  static const ::generated::traces::Parts& parts(const Root* msg);
  static const ::generated::traces::Syscalls& syscalls(const Root* msg);
};

const ::generated::traces::Parts& Root::_Internal::parts(const Root* msg) {
  return *msg->_impl_.value_.parts_;
}
const ::generated::traces::Syscalls& Root::_Internal::syscalls(
    const Root* msg) {
  return *msg->_impl_.value_.syscalls_;
}
void Root::set_allocated_parts(::generated::traces::Parts* parts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (parts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parts);
    if (message_arena != submessage_arena) {
      parts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parts, submessage_arena);
    }
    set_has_parts();
    _impl_.value_.parts_ = parts;
  }
  // @@protoc_insertion_point(field_set_allocated:generated.traces.Root.parts)
}
void Root::set_allocated_syscalls(::generated::traces::Syscalls* syscalls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (syscalls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(syscalls);
    if (message_arena != submessage_arena) {
      syscalls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syscalls, submessage_arena);
    }
    set_has_syscalls();
    _impl_.value_.syscalls_ = syscalls;
  }
  // @@protoc_insertion_point(field_set_allocated:generated.traces.Root.syscalls)
}
Root::Root(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.traces.Root)
}
Root::Root(const Root& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  Root* const _this = this;
  (void)_this;
  new (&_impl_)
      Impl_{decltype(_impl_.value_){}, /*decltype(_impl_._cached_size_)*/ {},
            /*decltype(_impl_._oneof_case_)*/ {}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kParts: {
      _this->_internal_mutable_parts()->::generated::traces::Parts::MergeFrom(
          from._internal_parts());
      break;
    }
    case kSyscalls: {
      _this->_internal_mutable_syscalls()
          ->::generated::traces::Syscalls::MergeFrom(from._internal_syscalls());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:generated.traces.Root)
}

inline void Root::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_)
      Impl_{decltype(_impl_.value_){}, /*decltype(_impl_._cached_size_)*/ {},
            /*decltype(_impl_._oneof_case_)*/ {}};
  clear_has_value();
}

Root::~Root() {
  // @@protoc_insertion_point(destructor:generated.traces.Root)
  if (auto* arena =
          _internal_metadata_
              .DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
    (void)arena;
    return;
  }
  SharedDtor();
}

inline void Root::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Root::SetCachedSize(int size) const { _impl_._cached_size_.Set(size); }

void Root::clear_value() {
  // @@protoc_insertion_point(one_of_clear_start:generated.traces.Root)
  switch (value_case()) {
    case kParts: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.parts_;
      }
      break;
    }
    case kSyscalls: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.syscalls_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}

void Root::Clear() {
  // @@protoc_insertion_point(message_clear_start:generated.traces.Root)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Root::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.traces.Parts parts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.traces.Syscalls syscalls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_syscalls(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Root::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.traces.Root)
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .generated.traces.Parts parts = 1;
  if (_internal_has_parts()) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::parts(this), _Internal::parts(this).GetCachedSize(),
            target, stream);
  }

  // .generated.traces.Syscalls syscalls = 3;
  if (_internal_has_syscalls()) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, _Internal::syscalls(this),
            _Internal::syscalls(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_
            .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.traces.Root)
  return target;
}

size_t Root::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:generated.traces.Root)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (value_case()) {
    // .generated.traces.Parts parts = 1;
    case kParts: {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *_impl_.value_.parts_);
      break;
    }
    // .generated.traces.Syscalls syscalls = 3;
    case kSyscalls: {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *_impl_.value_.syscalls_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Root::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, Root::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Root::GetClassData() const {
  return &_class_data_;
}

void Root::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                     const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Root*>(&to_msg);
  auto& from = static_cast<const Root&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.traces.Root)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (from.value_case()) {
    case kParts: {
      _this->_internal_mutable_parts()->::generated::traces::Parts::MergeFrom(
          from._internal_parts());
      break;
    }
    case kSyscalls: {
      _this->_internal_mutable_syscalls()
          ->::generated::traces::Syscalls::MergeFrom(from._internal_syscalls());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_
      .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
          from._internal_metadata_);
}

void Root::CopyFrom(const Root& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:generated.traces.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root::IsInitialized() const { return true; }

void Root::InternalSwap(Root* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Root::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_traces_2eproto_getter,
                                   &descriptor_table_traces_2eproto_once,
                                   file_level_metadata_traces_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace traces
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::generated::traces::Terminated*
Arena::CreateMaybeMessage<::generated::traces::Terminated>(Arena* arena) {
  return Arena::CreateMessageInternal<::generated::traces::Terminated>(arena);
}
template <>
PROTOBUF_NOINLINE ::generated::traces::IoData*
Arena::CreateMaybeMessage<::generated::traces::IoData>(Arena* arena) {
  return Arena::CreateMessageInternal<::generated::traces::IoData>(arena);
}
template <>
PROTOBUF_NOINLINE ::generated::traces::Fds*
Arena::CreateMaybeMessage<::generated::traces::Fds>(Arena* arena) {
  return Arena::CreateMessageInternal<::generated::traces::Fds>(arena);
}
template <>
PROTOBUF_NOINLINE ::generated::traces::Syscall*
Arena::CreateMaybeMessage<::generated::traces::Syscall>(Arena* arena) {
  return Arena::CreateMessageInternal<::generated::traces::Syscall>(arena);
}
template <>
PROTOBUF_NOINLINE ::generated::traces::Syscalls*
Arena::CreateMaybeMessage<::generated::traces::Syscalls>(Arena* arena) {
  return Arena::CreateMessageInternal<::generated::traces::Syscalls>(arena);
}
template <>
PROTOBUF_NOINLINE ::generated::traces::Parts_ReadDataEntry_DoNotUse*
Arena::CreateMaybeMessage<::generated::traces::Parts_ReadDataEntry_DoNotUse>(
    Arena* arena) {
  return Arena::CreateMessageInternal<
      ::generated::traces::Parts_ReadDataEntry_DoNotUse>(arena);
}
template <>
PROTOBUF_NOINLINE ::generated::traces::Parts*
Arena::CreateMaybeMessage<::generated::traces::Parts>(Arena* arena) {
  return Arena::CreateMessageInternal<::generated::traces::Parts>(arena);
}
template <>
PROTOBUF_NOINLINE ::generated::traces::Root*
Arena::CreateMaybeMessage<::generated::traces::Root>(Arena* arena) {
  return Arena::CreateMessageInternal<::generated::traces::Root>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
